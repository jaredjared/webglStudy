const fs = require('fs')
const FileCookieStore = require('tough-cookie-filestore')
const iconv = require('iconv-lite')
let request = require('request')

let req = module.exports = {}

req.post = function (url, data, auth = true) {
  return new Promise((resolve, reject) => {
    let ret = {
      code: 0,
      msg: 'success',
      data: {}
    }
    let j
    let params

    if (auth) {
      let cookieFile = process.cwd() + '/deploy/cookie.json'
      if (fs.existsSync(cookieFile)) {
        j = request.jar(new FileCookieStore(cookieFile))
        request = request.defaults({
          jar: j
        })
        params = {
          url: url,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
          },
          encoding: null,
          formData: data
        }
      } else {
        ret.code = 5003
        ret.msg = 'Please login again'
        resolve(ret)
      }
    } else {
      j = request.jar()
      params = {
        url: url,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
        },
        encoding: null,
        formData: data,
        jar: j
      }
    }

    request.post(params, (err, resp, body) => {
      if (err) {
        reject(new Error('Please check DNS or Network!'))
      }

      let html = iconv.decode(body, 'GBK')
      if (auth) {
        let regExp = /alert\((.*)\)/i
        let arr = regExp.exec(html)

        if (arr && arr[1].indexOf('获取用户信息失败，请重新登陆。') > -1) {
          ret['code'] = 5002
          ret['msg'] = arr[1]
        } else {
          ret['msg'] = 'success'
          ret['data']['html'] = html
        }
      } else {
        if (html.indexOf('success') > -1) {
          let cookies = j.getCookieString(url)
          let arr = cookies.split('; ')
          let obj = {}

          for (let i = 0, len = arr.length; i < len; i++) {
            let item = arr[i]
            let itemArr = item.split('=')

            obj[itemArr[0]] = itemArr[1]
          }

          ret['msg'] = 'login success'
          ret['data']['cookie'] = obj
        } else {
          ret['code'] = 5001
          ret['msg'] = 'username or password error, please input again'
        }
      }
      resolve(ret)
    })
  })
}

req.get = function (url, auth = true) {
  return new Promise((resolve, reject) => {
    let ret = {
      code: 0,
      msg: 'request success',
      data: {}
    }

    if (auth) {
      let cookieFile = process.cwd() + '/deploy/cookie.json'
      if (fs.existsSync(cookieFile)) {
        let j = request.jar(new FileCookieStore(cookieFile))

        request = request.defaults({
          jar: j
        })
      } else {
        ret['code'] = 5003
        ret['msg'] = cookieFile + ' does not exist, please login again'

        resolve(ret)
      }
    }

    request.get({
      url: url,
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'
      },
      encoding: null
    }, function (e, r, body) {
      if (e) {
        reject(new Error('Please check DNS or Network'))
      }

      let html = iconv.decode(body, 'GBK')
      let regExp = /alert\((.*)\)/i
      let arr = regExp.exec(html)

      if (arr && arr[1].indexOf('获取用户信息失败，请重新登陆。') > -1) {
        ret['code'] = 5002
        ret['msg'] = arr[1]
      } else {
        ret['msg'] = 'success'
        ret['data']['html'] = html
      }
      resolve(ret)
    })
  })
}
